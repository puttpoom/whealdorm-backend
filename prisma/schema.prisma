// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  DORM
  USER
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  password     String
  firstName    String   @map("first_name")
  lastName     String   @map("last_name")
  profileImage String?  @map("profile_image")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamp(0)
  role         Role

  apointments Appointment[]
  dorms       Dorm?

  @@map("users")
}

enum AppointmentStatus {
  PEDNING
  CONFIRM
  CANCLED
  DONE
}

model Appointment {
  id                Int               @id @default(autoincrement())
  fullName          String            @map("full_name")
  phone             String
  title             String
  appointedDate     String            @map("appointed_date")
  appointedTime     String            @map("appointed_time")
  createdAt         DateTime          @default(now())
  appointmentStatus AppointmentStatus @default(PEDNING) @map("appointment_status")

  User   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")
  Room   Room @relation(fields: [roomId], references: [id])
  roomId Int  @map("room_id")

  @@map("appointments")
}

enum IsVerify {
  PEDNING
  VERIFY
  BANDED
}

model Dorm {
  id              Int      @id @default(autoincrement())
  dormName        String   @map("dorm_name")
  phone           String
  dormImages      String?  @map("dorm_images")
  latLong         String?  @map("lat_long")
  location        String?
  distance        String
  electricalUnit  Decimal  @map("electrical_unit") @db.Decimal(4, 2)
  waterUnit       Decimal  @map("water_unit") @db.Decimal(4, 2)
  totalVacantRoom Int      @default(0) @map("total_vacant_room")
  isVerify        IsVerify @default(PEDNING) @map("is_verify")

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique @map("user_id")

  // 1-M
  room           Room[]
  //1-1
  dormFacilities DormFacilities?

  @@map("dorms")
}

model Room {
  id         Int        @id @default(autoincrement())
  title      String
  info       String?
  roomImages String?    @map("room_images") @db.VarChar(10000)
  price      Decimal    @db.Decimal(10, 2)
  size       Int?
  roomStatus RoomStatus @default(VACANT) @map("room_status")

  // Dorm         Dorm?         @relation(fields: [dormId], references: [id])
  // dormId       Int           @unique @map("dorm_id")
  appointments Appointment[]

  // 1-1
  roomFacilities RoomFacilities?

  // M-1
  Dorm      Dorm     @relation(fields: [dormId], references: [id])
  dormId    Int      @map("dorm_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("rooms")
}

enum RoomStatus {
  VACANT
  RENTED
}

model RoomFacilities {
  id            Int     @id @default(autoincrement())
  isAir         IsAir   @default(FAN) @map("is_air")
  isWaterHeater Boolean @default(false) @map("is_waterheater")
  isFurniture   Boolean @default(false) @map("is_furniture")
  isTable       Boolean @default(false) @map("is_table")
  isSink        Boolean @default(false) @map("is_sink")

  // 1-1
  room   Room @relation(fields: [roomId], references: [id])
  roomId Int  @unique @map("room_id")

  @@map("room_facilities")
}

enum IsAir {
  FAN
  AIRCONDITION

  @@map("is_air")
}

model DormFacilities {
  id               Int     @id @default(autoincrement())
  isParking        Boolean @default(false) @map("is_parking")
  isKeyCard        Boolean @default(false) @map("is_keycard")
  isLift           Boolean @default(false) @map("is_lift")
  isInternet       Boolean @default(false) @map("is_internet")
  isCCTV           Boolean @default(false) @map("is_ccty")
  isLundary        Boolean @default(false) @map("is_lundary")
  isWaterDispenser Boolean @default(false) @map("is_water_dispenser")
  isMart           Boolean @default(false) @map("is_mart")

  dorm   Dorm @relation(fields: [dormId], references: [id])
  dormId Int  @unique @map("dorm_id")

  @@map("dorm_facilities")
}
